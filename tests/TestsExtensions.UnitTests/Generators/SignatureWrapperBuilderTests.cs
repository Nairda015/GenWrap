using FluentAssertions;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TestsExtensions.Generators;
using TestsExtensions.UnitTests.Extensions;
using TestsExtensions.UnitTests.Helper;

namespace TestsExtensions.UnitTests.Generators;

public sealed class SignatureWrapperBuilderTests
{
    [Theory]
    [InlineData(Source, Path, _expectedSource)]
    internal void Build_ForSource_ReturnGeneratedSource(string source, string path, string expectedResult)
    {
        // Arrange
        var methodSyntax = SyntaxNodeCreator.GetSyntaxNodes<MethodDeclarationSyntax>(source).First();
        var builder = new SignatureWrapperBuilder();

        // Act
        builder.SetUsings(methodSyntax);
        builder.SetFilePath(path);
        builder.SetProperties(methodSyntax);
        var result = builder.Build();

        //Assert
        result.RemoveWhitespace().Should().Be(expectedResult.RemoveWhitespace());
    }

    private const string Path = "ChartExample/TestData/Chart_SimplifyPriceChangedSet_01.json";

    private const string Source = """
        using FluentAssertions;
        using TestsExtensions.Examples.ChartExample;
        using Xunit;

        namespace TestsExtensions.Examples.xUnit.ChartExample;

        public class ChartTests
        {
            [JsonTheory<ChartTests>]
            [JsonData("ChartExample/TestData/Chart_SimplifyPriceChangedSet_01.json")]
            public void SimplifyPriceChangedSet_ShouldReturnSimplifyChartPoints(
                List<PriceChangedEvent> events,
                List<ChartPoint> expected)
            {
                // Arrange
                var calculator = new Chart();

                // Act
                var result = calculator.SimplifyPriceChangedSet(events);

                // Assert
                result.Count.Should().Be(expected.Count);
                result.Should().BeEquivalentTo(expected);
            }  
        }
        """;

    private const string _expectedSource = """
        // <auto-generated/>
        using System;
        using System.Collections.Generic;
        using System.IO;
        using System.Linq;
        using System.Net.Http;
        using System.Threading;
        using System.Threading.Tasks;
        using System.Collections.Generic;
        using System.Text.Json;
        using FluentAssertions;
        using TestsExtensions.Examples.ChartExample;
        using Xunit;

        namespace TestsExtensions.Generated;

        file record SignatureWrapper : ISignatureWrapper
        {
            public string Key => ChartExample/TestData/Chart_SimplifyPriceChangedSet_01.json;
            public List<PriceChangedEvent> Events { get; init; }
        	public List<ChartPoint> Expected { get; init; }

            public IEnumerable<object[]> Deserialize(string json)
            {
                var data = JsonSerializer.Deserialize<List<SignatureWrapper>>(json);
                if (data is null) return new List<object[]>();

                return data
                    .Select(x => new object[] { x.Events, x.Expected })
                    .ToList();
            }
        }
        """;
}
