name: CICD

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/**'
  workflow_dispatch:
    inputs:
      version_type:
        required: true
        default: 'bug'
        type: choice
        options:
        - 'feature'
        - 'bug'
        - 'major'
      is_prerelease:
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  
  ci:    
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: true
    outputs:
      next_version: ${{ env.NEXT_VERSION }}
    steps: 

      - run: echo "VERSION_TYPE=${{ github.event.inputs.version_type }}" >> $GITHUB_ENV
      - name: override version type
        if: ${{ github.event.inputs.version_type == '' }}
        run: echo "VERSION_TYPE=bug" >> $GITHUB_ENV

      - name: checkout
        uses: actions/checkout@v3.3.0

      - name: setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: restore dependencies
        run: dotnet restore

      - name: bump version
        id: bump_version
        uses: christian-draeger/increment-semantic-version@1.0.2
        with:
          current-version: ${{ secrets.APP_VERSION }}
          version-fragment: ${{ env.VERSION_TYPE }}

      - run: echo "NEXT_VERSION=${{ steps.bump_version.outputs.next-version }}" >> $GITHUB_ENV
        
      - name: bump version
        id: bump_version_rc
        if: ${{ env.IS_PRERELEASE == 'true' }}
        uses: christian-draeger/increment-semantic-version@1.0.2
        with:
          current-version: ${{ env.NEXT_VERSION }}
          version-fragment: 'rc'

      - name: build
        run: dotnet build --no-restore --configuration Release -p:Version=${{ env.NEXT_VERSION }}

      - name: test
        run: dotnet test /p:Configuration=Release --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

      - name: upload coverage reports to codecov
        uses: codecov/codecov-action@v3

      - name: update version in secrets
        uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: 'APP_VERSION'
          value: ${{ env.NEXT_VERSION }}
          repository: "Nairda015/GenWrap"
          token: ${{ secrets.PAT_SEMVER_ROTATE_01_02_2024 }}
  
  cd:
    needs: [ ci ]
    runs-on: ubuntu-latest
    permissions: write-all
    timeout-minutes: 10
    steps:

      - run: echo "NEXT_VERSION=${{ needs.ci.outputs.next_version }}" >> $GITHUB_ENV
      - run: echo "IS_PRERELEASE=${{ github.event.inputs.is_prerelease }}" >> $GITHUB_ENV
      - name: override is prerelease
        if: ${{ github.event.inputs.is_prerelease == '' }}
        run: echo "IS_PRERELEASE=false" >> $GITHUB_ENV

      - name: checkout
        uses: actions/checkout@v3.3.0

      - name: setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: restore dependencies
        run: dotnet restore

      - name: dotnet pack
        shell: bash
        run: |
          dotnet pack /p:Version=${{ env.NEXT_VERSION }} --configuration=Release /p:PublishDir=./packages \
          /p:NoWarn=NU5105 \
          /p:RepositoryUrl=https://github.com/Nairda015/GenWrap \
          /p:RepositoryType=git

      - name: publish artifacts
        uses: actions/upload-artifact@v3.1.2
        with:
          path: packages
          name: nuget-packages

      - name: create a github release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ env.NEXT_VERSION }}
          title: "Release version: ${{ env.NEXT_VERSION }}"
          prerelease: ${{ env.IS_PRERELEASE == 'true' }}

      - name: dotnet push to github packages
        shell: bash
        run: |
          dotnet tool restore
          find . -name "*.nupkg" | xargs -n1 dotnet nuget push --api-key=${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/Nairda015/index.json --skip-duplicate

      - name: dotnet push to nuget.org
        shell: bash
        run: dotnet nuget push "packages/*.nupkg" --api-key ${{ secrets.NUGET_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
      
